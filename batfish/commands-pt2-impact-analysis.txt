# imports - note ... `import Interface`
from pybatfish.client.commands import *
from pybatfish.question.question import load_questions
from pybatfish.datamodel.flow import (HeaderConstraints,
                                         PathConstraints)

from pybatfish.question import bfq
from pybatfish.datamodel.primitives import Interface

bf_session.host = "172.29.236.139"
load_questions()

# init snapshot
NETWORK_NAME = "ebgp-spine-leaf-network"
BASE_SNAPSHOT_NAME = "ebgp-spine-leaf-snapshot"
SNAPSHOT_PATH = "/root/network-automation/batfish/nxos9k-ebgp-spine-leaf/snapshot-1"

bf_set_network(NETWORK_NAME)
bf_init_snapshot(SNAPSHOT_PATH, name=BASE_SNAPSHOT_NAME, overwrite=True)

# pprint bfq_traceroute
def pprint_traceroute(tr_answer):
    for flow_n, flow in enumerate(tr_answer['Flow']):
        print("# FLOW = {}\n".format(flow))
        for trace_n, trace in enumerate(tr_answer['Traces'][flow_n]):
           print("\n-- TRACE{}".format(trace_n))
           for steps in trace:
               print(steps)


# create snapshot fork - deactivate node
tr_answer = bfq.traceroute(startLocation="server1",headers=HeaderConstraints(dstIps='server2')).answer().frame()
pprint_traceroute(tr_answer)

// based on this lets deactivate spine2

bf_fork_snapshot(BASE_SNAPSHOT_NAME, 'spine2-failure', deactivate_nodes=['spine2'], overwrite=True)
tr_answer = bfq.traceroute(startLocation="server1",headers=HeaderConstraints(dstIps='server2')).answer('spine2-failure').frame()
pprint_traceroute(tr_answer)
